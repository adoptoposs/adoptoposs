# Find eligible builder and runner images on Docker Hub. We use Debian instead of
# Alpine to avoid DNS resolution issues in production.
#
# https://hub.docker.com/r/hexpm/elixir/tags?page=1&name=debian
# https://hub.docker.com/_/debian?tab=tags
#
#
# This file is based on these images:
#
#   - https://hub.docker.com/r/hexpm/elixir/tags - for the build image
#   - https://hub.docker.com/_/debian?tab=tags&page=1&name=bookworm-20250317-slim - for the release image
#   - https://pkgs.org/ - resource for finding needed packages
#   - Ex: hexpm/elixir:1.18.3-erlang-27.0.1-debian-bookworm-20250317-slim
#
ARG ELIXIR_VERSION=1.18.3
ARG OTP_VERSION=27.0.1
ARG DEBIAN_VERSION=bookworm-20250317-slim

ARG BUILDER_IMAGE="hexpm/elixir:${ELIXIR_VERSION}-erlang-${OTP_VERSION}-debian-${DEBIAN_VERSION}"
FROM ${BUILDER_IMAGE} as dev-build

# install build dependencies
RUN apt-get update -y && apt-get install -y build-essential curl git inotify-tools ca-certificates \
  && apt-get clean && rm -f /var/lib/apt/lists/*_*

# install nodejs
# See https://github.com/nodesource/distributions#installation-instructions
RUN apt-get install -y curl gnupg \
  && mkdir -p /etc/apt/keyrings \
  && curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg

ARG NODE_MAJOR=20
RUN echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main" | tee /etc/apt/sources.list.d/nodesource.list \
  && apt-get update \
  && apt-get install nodejs -y

# install yarn
RUN npm install -g yarn

# set host user if configured in .env, also see conpose.yaml
ARG DOCKER_USER
ENV DOCKER_USER $DOCKER_USER
ARG USER_ID
ENV USER_ID $USER_ID
ARG GROUP_ID
ENV GROUP_ID $GROUP_ID

RUN echo "current user: $DOCKER_USER"

RUN if [ ${USER_ID:-0} -ne 0 ] && [ ${GROUP_ID:-0} -ne 0 ] && [ ${DOCKER_USER:-root} != root ]; then \
    groupadd -g $GROUP_ID $DOCKER_USER && \
    useradd -u $USER_ID -g $DOCKER_USER -m $DOCKER_USER && \
    usermod -p "*" $DOCKER_USER && \
    usermod -aG sudo $DOCKER_USER \
;fi

USER $DOCKER_USER

# prepare build dir
WORKDIR /app

# install hex + rebar
RUN mix local.hex --force && \
    mix local.rebar --force

COPY mix* ./

RUN mix do \
    local.hex --force, \
    local.rebar --force

# install and compile hex and npm dependencies
FROM dev-build as ci

RUN mix do \
    deps.get, \
    deps.compile, \
    compile

COPY assets/package.json assets/yarn.lock /app/assets/
RUN cd assets && yarn install

COPY . ./
